<!DOCTYPE html>
<html>
<head>
    <title>Real-Time Products</title>
</head>
<body>
    <h1>Real-Time Products</h1>
    
    <ul>
        {{#each products}}
        <li>{{this.title}} - {{this.description}} - ${{this.price}}</li>
        {{/each}}
    </ul>

    <h2>Agregar Producto</h2>
    <form id="productForm">
        <input type="text" name="title" placeholder="Nombre del producto" required>
        <input type="text" name="description" placeholder="Descripción" required>
        <input type="number" name="price" placeholder="Precio" required>
        <button type="submit">Agregar Producto</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io(); 

        // Manejar la recepción de productos actualizados desde el servidor
        socket.on('updateProducts', (products) => {
            // Limpiar la lista de productos
            const productList = document.querySelector('ul');
            productList.innerHTML = '';

            // Agregar productos actualizados a la lista
            products.forEach((product) => {
                const productElement = document.createElement('li');
                productElement.innerText = `${product.title} - ${product.description} - $${product.price}`;
                productList.appendChild(productElement);
            });
        });

        // Manejar el envío del formulario para agregar productos
        const productForm = document.getElementById('productForm');
        productForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const formData = new FormData(productForm);
            const productData = {};
            formData.forEach((value, key) => {
                productData[key] = value;
            });

            // Emitir la actualización de productos al servidor a través de WebSockets
            socket.emit('addProduct', productData);

            // Limpiar el formulario
            productForm.reset();
        });
    </script>
</body>
</html>